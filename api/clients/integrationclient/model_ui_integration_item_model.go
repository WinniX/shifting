/*
 * Integration API
 *
 * The Integration API allows apps to ...
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package integrationclient

import (
	"encoding/json"
)

// UiIntegrationItemModel struct for UiIntegrationItemModel
type UiIntegrationItemModel struct {
	Id string `json:"id"`
	Code string `json:"code"`
	Label string `json:"label"`
	LabelTranslations *map[string]string `json:"labelTranslations,omitempty"`
	IconSource *string `json:"iconSource,omitempty"`
	SourceUrl string `json:"sourceUrl"`
	PropertyIds *[]string `json:"propertyIds,omitempty"`
	Roles *[]string `json:"roles,omitempty"`
	// Public source type means, that the browser can see the URL directly. This is true for instance, if you have Hybrid OAuth flow active.                Private source type means, that the server will request from that source URL a public URL, which is pre-authenticated and forward that to the client.
	SourceType string `json:"sourceType"`
	Target string `json:"target"`
}

// NewUiIntegrationItemModel instantiates a new UiIntegrationItemModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUiIntegrationItemModel(id string, code string, label string, sourceUrl string, sourceType string, target string) *UiIntegrationItemModel {
	this := UiIntegrationItemModel{}
	this.Id = id
	this.Code = code
	this.Label = label
	this.SourceUrl = sourceUrl
	this.SourceType = sourceType
	this.Target = target
	return &this
}

// NewUiIntegrationItemModelWithDefaults instantiates a new UiIntegrationItemModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUiIntegrationItemModelWithDefaults() *UiIntegrationItemModel {
	this := UiIntegrationItemModel{}
	return &this
}

// GetId returns the Id field value
func (o *UiIntegrationItemModel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UiIntegrationItemModel) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UiIntegrationItemModel) SetId(v string) {
	o.Id = v
}

// GetCode returns the Code field value
func (o *UiIntegrationItemModel) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *UiIntegrationItemModel) GetCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *UiIntegrationItemModel) SetCode(v string) {
	o.Code = v
}

// GetLabel returns the Label field value
func (o *UiIntegrationItemModel) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *UiIntegrationItemModel) GetLabelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *UiIntegrationItemModel) SetLabel(v string) {
	o.Label = v
}

// GetLabelTranslations returns the LabelTranslations field value if set, zero value otherwise.
func (o *UiIntegrationItemModel) GetLabelTranslations() map[string]string {
	if o == nil || o.LabelTranslations == nil {
		var ret map[string]string
		return ret
	}
	return *o.LabelTranslations
}

// GetLabelTranslationsOk returns a tuple with the LabelTranslations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UiIntegrationItemModel) GetLabelTranslationsOk() (*map[string]string, bool) {
	if o == nil || o.LabelTranslations == nil {
		return nil, false
	}
	return o.LabelTranslations, true
}

// HasLabelTranslations returns a boolean if a field has been set.
func (o *UiIntegrationItemModel) HasLabelTranslations() bool {
	if o != nil && o.LabelTranslations != nil {
		return true
	}

	return false
}

// SetLabelTranslations gets a reference to the given map[string]string and assigns it to the LabelTranslations field.
func (o *UiIntegrationItemModel) SetLabelTranslations(v map[string]string) {
	o.LabelTranslations = &v
}

// GetIconSource returns the IconSource field value if set, zero value otherwise.
func (o *UiIntegrationItemModel) GetIconSource() string {
	if o == nil || o.IconSource == nil {
		var ret string
		return ret
	}
	return *o.IconSource
}

// GetIconSourceOk returns a tuple with the IconSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UiIntegrationItemModel) GetIconSourceOk() (*string, bool) {
	if o == nil || o.IconSource == nil {
		return nil, false
	}
	return o.IconSource, true
}

// HasIconSource returns a boolean if a field has been set.
func (o *UiIntegrationItemModel) HasIconSource() bool {
	if o != nil && o.IconSource != nil {
		return true
	}

	return false
}

// SetIconSource gets a reference to the given string and assigns it to the IconSource field.
func (o *UiIntegrationItemModel) SetIconSource(v string) {
	o.IconSource = &v
}

// GetSourceUrl returns the SourceUrl field value
func (o *UiIntegrationItemModel) GetSourceUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceUrl
}

// GetSourceUrlOk returns a tuple with the SourceUrl field value
// and a boolean to check if the value has been set.
func (o *UiIntegrationItemModel) GetSourceUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SourceUrl, true
}

// SetSourceUrl sets field value
func (o *UiIntegrationItemModel) SetSourceUrl(v string) {
	o.SourceUrl = v
}

// GetPropertyIds returns the PropertyIds field value if set, zero value otherwise.
func (o *UiIntegrationItemModel) GetPropertyIds() []string {
	if o == nil || o.PropertyIds == nil {
		var ret []string
		return ret
	}
	return *o.PropertyIds
}

// GetPropertyIdsOk returns a tuple with the PropertyIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UiIntegrationItemModel) GetPropertyIdsOk() (*[]string, bool) {
	if o == nil || o.PropertyIds == nil {
		return nil, false
	}
	return o.PropertyIds, true
}

// HasPropertyIds returns a boolean if a field has been set.
func (o *UiIntegrationItemModel) HasPropertyIds() bool {
	if o != nil && o.PropertyIds != nil {
		return true
	}

	return false
}

// SetPropertyIds gets a reference to the given []string and assigns it to the PropertyIds field.
func (o *UiIntegrationItemModel) SetPropertyIds(v []string) {
	o.PropertyIds = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *UiIntegrationItemModel) GetRoles() []string {
	if o == nil || o.Roles == nil {
		var ret []string
		return ret
	}
	return *o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UiIntegrationItemModel) GetRolesOk() (*[]string, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *UiIntegrationItemModel) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *UiIntegrationItemModel) SetRoles(v []string) {
	o.Roles = &v
}

// GetSourceType returns the SourceType field value
func (o *UiIntegrationItemModel) GetSourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value
// and a boolean to check if the value has been set.
func (o *UiIntegrationItemModel) GetSourceTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SourceType, true
}

// SetSourceType sets field value
func (o *UiIntegrationItemModel) SetSourceType(v string) {
	o.SourceType = v
}

// GetTarget returns the Target field value
func (o *UiIntegrationItemModel) GetTarget() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *UiIntegrationItemModel) GetTargetOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *UiIntegrationItemModel) SetTarget(v string) {
	o.Target = v
}

func (o UiIntegrationItemModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["code"] = o.Code
	}
	if true {
		toSerialize["label"] = o.Label
	}
	if o.LabelTranslations != nil {
		toSerialize["labelTranslations"] = o.LabelTranslations
	}
	if o.IconSource != nil {
		toSerialize["iconSource"] = o.IconSource
	}
	if true {
		toSerialize["sourceUrl"] = o.SourceUrl
	}
	if o.PropertyIds != nil {
		toSerialize["propertyIds"] = o.PropertyIds
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if true {
		toSerialize["sourceType"] = o.SourceType
	}
	if true {
		toSerialize["target"] = o.Target
	}
	return json.Marshal(toSerialize)
}

type NullableUiIntegrationItemModel struct {
	value *UiIntegrationItemModel
	isSet bool
}

func (v NullableUiIntegrationItemModel) Get() *UiIntegrationItemModel {
	return v.value
}

func (v *NullableUiIntegrationItemModel) Set(val *UiIntegrationItemModel) {
	v.value = val
	v.isSet = true
}

func (v NullableUiIntegrationItemModel) IsSet() bool {
	return v.isSet
}

func (v *NullableUiIntegrationItemModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUiIntegrationItemModel(val *UiIntegrationItemModel) *NullableUiIntegrationItemModel {
	return &NullableUiIntegrationItemModel{value: val, isSet: true}
}

func (v NullableUiIntegrationItemModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUiIntegrationItemModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


